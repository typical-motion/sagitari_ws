// Generated by gencpp from file uart_process_2/uart_send.msg
// DO NOT EDIT!


#ifndef UART_PROCESS_2_MESSAGE_UART_SEND_H
#define UART_PROCESS_2_MESSAGE_UART_SEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uart_process_2
{
template <class ContainerAllocator>
struct uart_send_
{
  typedef uart_send_<ContainerAllocator> Type;

  uart_send_()
    : xdata(0.0)
    , ydata(0.0)
    , zdata(0.0)
    , tdata(0.0)
    , Cmdata(0)  {
    }
  uart_send_(const ContainerAllocator& _alloc)
    : xdata(0.0)
    , ydata(0.0)
    , zdata(0.0)
    , tdata(0.0)
    , Cmdata(0)  {
  (void)_alloc;
    }



   typedef float _xdata_type;
  _xdata_type xdata;

   typedef float _ydata_type;
  _ydata_type ydata;

   typedef float _zdata_type;
  _zdata_type zdata;

   typedef float _tdata_type;
  _tdata_type tdata;

   typedef uint8_t _Cmdata_type;
  _Cmdata_type Cmdata;





  typedef boost::shared_ptr< ::uart_process_2::uart_send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uart_process_2::uart_send_<ContainerAllocator> const> ConstPtr;

}; // struct uart_send_

typedef ::uart_process_2::uart_send_<std::allocator<void> > uart_send;

typedef boost::shared_ptr< ::uart_process_2::uart_send > uart_sendPtr;
typedef boost::shared_ptr< ::uart_process_2::uart_send const> uart_sendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uart_process_2::uart_send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uart_process_2::uart_send_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uart_process_2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'uart_process_2': ['/home/lss233/sagitari_ws/src/uart_process_2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uart_process_2::uart_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uart_process_2::uart_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uart_process_2::uart_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uart_process_2::uart_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uart_process_2::uart_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uart_process_2::uart_send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uart_process_2::uart_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "128b179fa20ccd12168b588fea92e3a7";
  }

  static const char* value(const ::uart_process_2::uart_send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x128b179fa20ccd12ULL;
  static const uint64_t static_value2 = 0x168b588fea92e3a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::uart_process_2::uart_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uart_process_2/uart_send";
  }

  static const char* value(const ::uart_process_2::uart_send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uart_process_2::uart_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xdata\n\
float32 ydata\n\
float32 zdata\n\
float32 tdata\n\
uint8 Cmdata\n\
";
  }

  static const char* value(const ::uart_process_2::uart_send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uart_process_2::uart_send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xdata);
      stream.next(m.ydata);
      stream.next(m.zdata);
      stream.next(m.tdata);
      stream.next(m.Cmdata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uart_send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uart_process_2::uart_send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uart_process_2::uart_send_<ContainerAllocator>& v)
  {
    s << indent << "xdata: ";
    Printer<float>::stream(s, indent + "  ", v.xdata);
    s << indent << "ydata: ";
    Printer<float>::stream(s, indent + "  ", v.ydata);
    s << indent << "zdata: ";
    Printer<float>::stream(s, indent + "  ", v.zdata);
    s << indent << "tdata: ";
    Printer<float>::stream(s, indent + "  ", v.tdata);
    s << indent << "Cmdata: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Cmdata);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UART_PROCESS_2_MESSAGE_UART_SEND_H
